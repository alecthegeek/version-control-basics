# Overview and Front Matter

This course is part of the material to support students and mentors using the Raspberry Pi educational computer.
The examples in this course have been tested #TODO on Debian Linux

## STATUS: EARLY DRAFT!!


This document is still under development. Please help if you can at https://github.com/alecthegeek/version-control-basics


##Justification

1. Version Control (VC) is an important practice for developers and a prerequisite for developing quality software
1. Distributed Version Control Systems (DVCS) provide a useful platform for students to work together on educational projects

##Outcomes

At the completion of this module students will be:

1. Able to describe the benefits of using version control
	1. Describe problems that can occur when groups of people work together on computer files during a project
	1. Understand basic VC concepts and terminology -- commit, commit history, change, branch, merge, commit message
1. Capable, with reference to notes and documentation, of using Git for version control of new and existing projects, including working in a project group
	1. Create a local repository (repo)
	1. Commit a change or modification
	1. Create a branch
	1. Show the history
	1. Show change differences using diff
	1. Perform a merge
	1. Push and fetch changes to and from a remote repo (For simplicity the git pull command is not taught)

## Suggested Approach

This topic should be introduced early on in the programming course and the practices it introduces applied continually as the rest of the course progresses.
Before starting this module students should have the following pre-requisite skills:

1. Using a text editor (open a file, find a line, search for text, make a simple change, save a file)
1. Understand files and directories
1. Some exposure to using the command line interface would be useful

#Introduction
##What is Version Control and how do Version Control Systems work
Version Control (VC) is a common practice used to track all the changes that occur to the files in a project over time. It needs a Version Control System (VCS) tool to work.

The way that a VCS works by recording a history of changes. What does that mean?

Every time a change is completed (for example fixing a bug in a project) the developer decides a logical ''save''
point has been reached and will store all the file changes that make up the fix in the VCS database.

The term often used for a group or changes that belong together like this is a __changeset__.
As well as changing lines of code in source files there might be changes to
configuration files, documentation, graphic files and so on.

Along with the changes to the files the developer will be prompted by the VCS  to provide a
description of the change with a __commit message__ which is appended to the __commit log__.

The process of storing the changes in the VCS database
(usually refereed to as the __repository__ or repo for short)
is called __making a commit__.

The hard work in making a commit is done by the VCS,
all the developer does is issue the commit command and provide the commit message.
The VCS software calculates which files have changed since the last commit and what has changed.
It then stores these changes, plus the commit message, the date, time, name of the developer (committer),
commit message and other information in the repository.


Version Control is also sometimes refereed to as [http://en.wikipedia.org/wiki/Revision_control Revision Control]

##Why is Version Control is so important

Imagine a software project. It might have hundreds of files (for example source code, build scripts, graphics, design documents, plans etc.) and dozens of people working on the project making
different types of changes. There are several problems that will happen:

1. Two people might be editing the same file at once and changes can be overwritten
1. After the project has been running for some time it's very hard to understand how the project has evolved and what changes have been made.
How can we locate a problem that might have been introduced some time ago.
Just fixing the problem may not be enough, we probably also need to to understand the change that introduced it.
1. If two people want to change the same file one will have to wait for the other to finish, this is very inefficient
1. If two people people are making (long running) changes to the project it may take some time for the both sets of changes to be compatible with each other.
If the same copy if the project is being updated with both sets of changes then the project may not work correctly or even compile

There are three core things a VCS helps do:

1. Answer the following questions: "What changes were made in the past?", "Why were they made?" and "Who made them?" (via commit history and commit comments)
	1. Individual developers find this information useful as part of their daily workflow and
	it also helps organisations with their compliance and audit management
1. Undo a half complete or incorrect change made in error and "roll back" to a previous version
1. Recreate a "snapshot" of the project as it was at some point in the past
1. Allow two streams of changes to be made independently of each other and then integrated at a later date (parrallel development).
This feature depends on the specific features of the VCS tool you are using

You may find the following additional reading useful in introducing important ideas: http://tom.preston-werner.com/2009/05/19/the-git-parable.html

##Types of Tools available
* Distributed vs. Centralised
	* Modern VCS work on a distributed model (DVCS). This means that every member of the project team keeps a complete local copy of all the changes. The previous model, still widely used with tools like Subversion, is centralised. There is only one central database with all the changes and team members only have a copy of the change they are currently working on.
*  Open Source and Commercial Tools

There are many commercial and open source tools avliable in the market. As well as the core VC operations tools will offer different combinations
of features, support and integrations. In this module we will be using a tool called Git, a popular open source tools that uses a distribute model
with excellent support for parrarell development.

*  What the version control tools do?
	* Provide comphensive historical information about the work done on the project
	* Help prevent the lost of information (e.g. edits being overwritten)
	* Help the project team be moe efficient by using parrallel development
(and often integrating with other tools such as: Ticket Systems; built Systems; project management etc.)
	* Helping individual developers be more efficient with tools such as difference reports

#An example using Git

The rest of this module will take an hands on approach by demonstrating the use of Git to manage a simple set of changes.
You should follow along on your own Raspberry Pi using a new test project as explained below.

Git (http://git-scm.com/) is very popular DVCS originally developed to maintain the GNU/Linux kernel source code
(the operating system that usually runs on the Raspberry Pi).
It is now used by many very large open source projects and a lot of commercial development teams.
Git is very flexible and has a reputation of being hard to use,
but we are only going to concentrate on the ten or so commands you need to be useful day to day.

There are many excellent tutorials for Git on the Internet. See the External References section below.

These examples assume that you are using Debian Linux on a Raspberry Pi and have downloaded the Python Snakes project from the [http://www.raspberrypi.org/game.tar.gz Raspberry Pi website] into a directory called <code>snakes</code>.
All the commands are issued from a terminal.
You can start the terminal from the LXDE GUI by #TODO..... Initially this example assumes that the current directory is your home directory, which is the default when you start a terminal window.

###  Setup up
1. Make sure you have the correct tools installed by typing the following commands:

		sudo apt-get install git git-gui git-gitk

  #TODO: See if kdiff3 works on RasPi and provide instructions for mergetool and difftool setup?

1. Test the installation with the command

		git --version

1. you should see something like

		git version 1.7.10

1. Tell Git who you are (this is very important information and it recorded in every change in you make or commit)

		git config --global user.name "My Name"

		git config --global user.email "myname@mycollege.ed.uk"


You must of course substitute your own name and email address in the correct places.
Git records that information in a user configuration file called <code>.gitconfig</code> in your home directory

Linux and Mac OS X users should also run the command

		git config --global core.autocrlf input

(MS Windows uers should issue the command <code>git config --global core.autocrlf true</code>).
See http://help.github.com/line-endings/ for further details.

### Starting a new project by creating a repo

The next thing we need to do it create an empty Git database, called a repo (short for repository) inside our snakes directory

		cd snakes
		git init
		Initialized empty Git repository in /home/alec/snakes/.git/

Notice that the VC tool has created a hidden directory called <code>.git</code>.
In Linux all file and directory (folder) names that start with a "<code>.</code>" are normally hidden, but you can see them with the command <code>ls -A</code>.

Next we issue a status command.

		git status

In Git all commands are typed after the word git (e.g. <code>git init</code> or <code>git status</code>).
The output from the status command is

		# On branch master
		# 
		# Initial commit
  
		# Untracked files:
		#   (use "git add <file>..." to include in what will be committed)
  
		#	game/
		#	helloworld.py
		#	if.py
		#	maths.py
		#	variables.py
		#	while.py
		nothing added to commit but untracked files present (use "git add" to track)

We can ignore most of the detail for now. What important is that Git:

1. Warns us that some files are not being controlled (untracked) by the VCS
1. Lists the files and directories with their status. We will see this change as we progress further in the example.

### Add the project files to version control

Before changes are added to the repo database we have to decide what will be in the commit. There might be a many changes
in the files we are working on, but our changset is actually only a small number of changes.

Git has a novel solution to this called the index. Before a file change can be committed to the repo it is first
added to the index. As well as adding files to the index, files can be moved or deleted. Once all the parts of the
commit are complete a commit command is issued. The following examples are simple and for the time being you
should just expect that before a commit is done changes are added to the index as the following example shows.

		git add .

This command does not product any output by default so don't be concerned if you get no messages. If you get a message
similar to <code>warning: CRLF will be replaced by LF ...</code> then this is normal as well (some versions of
the Snakes project are provided in Windows format text files).

if we run the <code>git status</code> command now we get different output

		# On branch master
		#
		# Initial commit
		#
		# Changes to be committed:
		#   (use "git rm --cached <file>..." to unstage)
		#
		#	new file:   game/game0.py
		#	new file:   game/game1.py
		#	new file:   game/game2.py
		#	new file:   game/game3.py
		#	new file:   game/game4.py
		#	new file:   game/snake.py
		#	new file:   helloworld.py
		#	new file:   if.py
		#	new file:   maths.py
		#	new file:   variables.py
		#	new file:   while.py
		#

This time each file that will be committed is listed, not just the directory, and the status has changed
from <code>untracked</code> to <code>new file</code>.

Now that the file contents have been added to the index we can commit these changes as our first commit

		git commit -m "Initial Commit"

Git adds the files and related information to our repo and provides a rather verbose set of messages about what it
did

		master (root-commit) cff14c5] Initial Commit
		 11 files changed, 693 insertions(+)
		 create mode 100755 game/game0.py
		.......___and so on___


Some interesting commands we can now run

		git status

		# On branch master
		nothing to commit (working directory clean)


Another command worth running is <code>git log</code>, whch is currently very brief as we have only have one commit. Mine 
looks like this

		commit 9b941110ffadf261fff069c0aa9ca6042e10422b
		Author: Alec Clews <alecclews@gmail.com>
		Date:   Mon May 14 20:47:43 2012 +1000

		    Initial Commit


The meaning of the Author, Date and comment field should be obvious. The commit field will be explained later.

We now have our project under version control.

### Making a change


Now lets make a change. The first step is to create a work area in which to make the change. In Git
(and many other VC tools) this dedicated work area is called a __branch__. When you first create a repo
the default branch that is created is called __master__, but it's important to know that there is nothing special
about master branch, it can be treated in exactly the same way as any branches you create yourself.

If you look at the output from the status command above you can see that we are currently using the master branch
in our working area.

What Change do I want to make? When I play the verion of snakes I have the rocks are represented by "Y" which
I want to change to "R". The line in I need to change is in the file snake.py (lines 50 and 52 in my version).

 

Let's create a branch to work on.

		git branch make_rocks_R

No message means the command was successful (note that spaces are not allowed in the branch name)

You can get a lit of all the branches with the <code>git branch</code> command

		  make_rocks_R
		* master

The asterisk shows the current branch.

To make the <code>make_rocks_R</code> the current branch use the checkout command

		git checkout make_rocks_R
		Switched to branch 'make_rocks_R'

Now <code>git branch</code> displays

		* make_rocks_R
		  master


At this point you make want to play snakes for a couple of minutes so that you will be able to see the difference later.
Use the command <code>python game/snake.py</code>

+  Changing the file

Edit the file <code>game/snake.py</code> using your favourite text editor. In the version of snakes I had there are two changes to
make; a comment on line 50; and the actual code on line 52. Save the changes and test the game by playing it again.

+  Showing the diff

So let's see what has changed. Git can provide a nice listing
+  Committing the change
+  Showing the history
+  Branches

# Working with others

*  Remote repos
*  Merging
*  Patches

# External References


Several videos that introduce the basic ideas of version control can be found at http://git-scm.com/videos or on YouTube at:


* Episode 1: http://www.youtube.com/watch?v=K2wBGt-j0fE
* Episode 2: http://www.youtube.com/watch?v=0BIGxolZQHo
* Episode 3: http://www.youtube.com/watch?v=ojVzmIp6Xv0
* Episode 4: http://www.youtube.com/watch?v=pv25aLwYpEU

*  [http://progit.org/ Pro Git], an online and published book
*  [http://youtu.be/ZDR433b0HJY Introduction to Git] video with Scott Chacon of GitHub

# Appendix A: Notes for Teachers and group faciltators


Git is a useful platform for students to work together. Additional if their programming work needs to be accessed then it
provides a useful mechanism for students and teams to submit their work.

Students can collaborate using four different models:

1. Using a third party service such as GitHub, Gitorious or BitBucket. Examples are given below for GitHub
1. Via a private server provided by the school. This is beyond the scope of this document
1. Students can exchange work using a peer to peer model. This requires a local area for the students to exchange work #todo Add notes on remote
1. Students can exchange using Git patches on USB drives (a __sneakernet__). This is most technology simple solution but
is more complicated for students and is beyond the scope of this document

## Using a third party web hosting service. GitHub

(GitHub)[GitHub.com] provide specific git hosting service for schools. see https://github.com/edu for details.

1. Create a a GitHub organisation for your school or organisation
1. Let GitHub know the details of your account using the form at https://github.com/edu.
This will allow your students to have private repos.
N.B. Normally all free accounts are public and the code they contain in freely available.
1. Your students should create their own account on GitHub (see Appendix B). Students can follow the instructions at http://help.github.com/
1. You then add your students to the appropriate GitHub organisation

# Appendix B: Notes for self study students

Students are recommended to use a remote hosting account fo their code. It develops good technique and provides a useful back up

There are a variety of free services available (see appendix A for some suggestions).
GitHub has easy to follow instructions at http://help.github.com/
